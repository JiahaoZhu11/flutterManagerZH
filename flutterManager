#!/bin/bash

##############################
########## Methods ###########
##############################

function help() {
  echo "
*********************
**  Flutter管理器  **
*********************

用于管理 Flutter 不同版本间的切换。需要注意的是，该管理器只负责管理包之间的切换，但不会检查包中内容是否正确。

用法：flutterManager <command> [arguments]

可输入指令:
ls                          列出当前可更换的包。
ls -all                     列出当前可用的所有包。
current                     显示当前使用的 flutter 包名。
current -v                  显示当前使用的 flutter 版本。
set [新包名]                设置新包作为当前使用的 flutter 包。
[...任何未被包含的指令]     显示对应指令的更多信息。
"
  return 0
}

function list() {
  if [ "$1" -eq 1 ]
  then
    echo "使用中的包：
  - $current"
  fi
  echo "可替换的包："
  for package in ${packages[*]} ; do
    echo "  - $package"
  done
}

function current() {
  if [ "$1" -eq 1 ]
  then
    flutter --version
    exit
  fi
  echo "$current"
}

function set() {
  if [ "$1" == "$current" ]
  then
    echo "$1 包正在使用中"
  elif [ -d "$(dirname "$0")/packages/$1" ]
  then
    mv "$(dirname "$0")/packages/current" "$(dirname "$0")/packages/$current"
    mv "$(dirname "$0")/packages/$1" "$(dirname "$0")/packages/current"
    echo "$1" > "$(dirname "$0")/.config/package_in_use"
    echo "已将 Flutter 包从 $current 替换为 $1"
  else
    echo "$1 包不存在"
  fi
}


##############################
########## Scripts ###########
##############################

# Initialize packages
if [ ! -d "$(dirname "$0")/packages" ]
then
  mkdir "$(dirname "$0")/packages"
fi
count=0
for package in $(cd "$(dirname "$0")/packages" || exit; ls)
do
  if [ "$package" != "current" ]
  then
    packages+=("$package")
  fi
  ((count++))
done
if [ "$count" -eq 0 ]
then
  if [ -d "$(dirname "$0")/.config" ]
  then
    rm -r "$(dirname "$0")/.config"
  fi
  echo "没有可用的包，请去 https://docs.flutter.dev/development/tools/sdk/releases?tab=macos 中下载 Flutter 包并放到 $(dirname "$0")/packages 中"
  exit
fi

# Initialize current package
if [ ! -f "$(dirname "$0")/.config/package_in_use" ]
then
  echo "配置文件不存在，开始生成配置文件"
  if [ ! -d "$(dirname "$0")/.config" ]
  then
    mkdir "$(dirname "$0")/.config"
  fi
  if [ -d "$(dirname "$0")/packages/current" ]
  then
    echo -n "current 包已存在，请输入真实包名："
    read -r packageName
    if [ "$packageName" == "" ] | [ "$packageName" == "current" ]
    then
      packageName=$(uuidgen)
    echo "包名非法，已自动生成随机包名：$packageName"
    fi
  else
    packageName="${packages[0]}"
    mv "$(dirname "$0")/packages/$packageName" "$(dirname "$0")/packages/current"
  fi
  echo "$packageName" > "$(dirname "$0")/.config/package_in_use"
  echo "已将 $packageName 设为当前使用的包"
fi
current=$(head -n1 "$(dirname "$0")/.config/package_in_use")

# Output intro
if [ $# -eq 0 ]
then
  help
  exit
fi

# Parse command
case $1 in
"ls")
  if [ $# -eq 1 ]
  then
    list 0
    exit
  elif [ $# -eq 2 ] && [ "$2" == "-all" ]
  then
    list 1
    exit
  fi
  ;;
"current")
  if [ $# -eq 1 ]
  then
    current 0
    exit
  elif [ $# -eq 2 ] && [ "$2" == "-v" ]
  then
    current 1
    exit
  fi
  ;;
"set")
  if [ $# -eq 2 ]
  then
    set "$2"
    exit
  fi
  ;;
esac

help
